== Hooyu intro

Hooyu is a way to connect a hyperlocal community (like your company) by matching faces to names / departments.

Built using Ruby on Rails and React, the standard RoR project guidelines are followed (using foreman for process management). Postgres and Neo4j are used for data-stores, with the main game logic stored in Neo4j.

== Setting up Hooyu

Data is managed through Neo4j: https://neo4j.com/

1. Clone repo from https://github.com/sb8244/Hooyu.git.
2. Run `bundle` from directory repo is cloned to.
3. Create an .env file from the .env_template.
4. Generate a hash secret by running rake secret and enter the value into the HASH_SECRET variable in your .env file.
5. Install and run neo4j:
    a. bundle exec rake neo4j:install[community-2.2.2,development].
    b. bundle exec rake neo4j:install[community-2.2.2,test].
    c. bundle exec rake neo4j:config[test,7475].
    d. bundle exec rake neo4j:start[development].
    e. bundle exec rake neo4j:start[test].
6. Once neo4j is running, configure your local username and password:
    a. Go to localhost:7474 (the default port for neo4j).
    b. Follow the prompts to set your username and password (neo4j/neo4j if you don’t care).
    c. In your Hooyu .env file, set the the NEO4J_USER and NEO4J_PASSWORD to the username and password you just created.
    d. Repeat steps a & b for the test instance running on localhost:7475. Make sure to set the username and password to the same values as the dev instance.
7. Generate your GOOGLE_CLIENT_ID and GOOGLE_CLIENT_SECRET. Make sure you set your callback url.
8. Initialize your database:
    a. bundle exec rake db:create.
    b. bundle exec rake db:migrate.
    c. bundle exec rake db:test:prepare.
9. Confirm all specs pass by running bundle exec rspec.
10. Create an organization through the rails console:
      a. Organization.create(name: "SalesLoft", domain: "salesloft.com", available_departments: [ "Marketing", "Support", "Engineering", "Finance", "Sales", "Leadership", "Account Management", "Implementation", "Sales  Development", "Administration", "Product"]).
11. Prepare for local front end development:
      a. run npm install.
      b. Keep gulp watch running as you change front end code in order for it to recompile as you code.
12. Run your server with foreman s.
13. To generate a list of random people, run the following command in your rails console: 100.times { FactoryGirl.create(:person) }
14. To test the admin features of the app:
      a. Update your user’s admin flag to true: User.first.update(admin: true).
      b. Use the people management page at localhost:3000/admin/people.

